page.title=Configuring and Building a Product
@jd:body

<!--
    Copyright 2010 The Android Open Source Project

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<div id="qv-wrapper">
  <div id="qv">
    <h2>In this document</h2>
    <ol id="auto-toc">
    </ol>
  </div>
</div>

<p>
  There are many ways to organize the source files for your device. We'll briefly go over how the
  Galaxy Nexus implementation was organized as an example, but you can organize your source files
  and build the way you see fit.
</p>
<p>
  Galaxy Nexus was implemented with a main device configuration named <code>tuna</code> that has
  two specific variations: <code>maguro</code> for GSM and <code>toro</code> for CDMA. The two
  device variations inherited common characteristics from <code>tuna</code> by calling
  <code>tuna</code>'s device Makefile and then defined their own device-specific characteristics.
  From these device configurations, a product is created with a product definition Makefile that
  declares product-specific information about the device such as the name and model.
  You can view the <code>device/samsung/tuna</code>, <code>device/samsung/maguro</code>, and
  <code>device/samsung/toro</code> directories to see how all of this is setup.
</p>
<h2 id="configuring">
  Configuring a Product
</h2>
<p>
  The following steps describe how to set up products in a way similar to that of the Galaxy Nexus
  product line:
</p>
<ol>
  <li>Create a <code>device/&lt;company_name&gt;/&lt;device_name&gt;</code> directory for your
  product. For example, <code>device/samsung/tuna</code>. This directory will contain source code
  for your device along with the Makefiles to build them.
  </li>

  <li>Create a <code>device.mk</code> Makefile that declares the files and modules needed for the
  device. For an example, see <code>device/samsung/tuna/device.mk</code>.
  </li>

  <li>Create a product definition Makefile to create a specific product based on the device. The
  following Makefile is taken from <code>device/samsung/tuna/full_tuna.mk</code> as an example.
  Notice that the product is inheriting from the tuna and full (emulator) devices via their
  Makefiles, while also declaring the product-specific information such as the name, brand, and model.
  
<pre>
# Inherit from those products. Most specific first.
$(call inherit-product, $(SRC_TARGET_DIR)/product/full_base.mk)
# This is where we'd set a backup provider if we had one
#$(call inherit-product, device/sample/products/backup_overlay.mk)
# Inherit from tuna device
$(call inherit-product, device/samsung/tuna/device.mk)

# Set those variables here to overwrite the inherited values.
PRODUCT_NAME := full_tuna
PRODUCT_DEVICE := tuna
PRODUCT_BRAND := Android
PRODUCT_MODEL := Full AOSP on Tuna
</pre>

    <p>
      See <a href="{@docRoot}devices/build_new_device.html#prod-def">Product Definition Variables</a> for additional product-specific
      variables you can add to your Makefiles.
    </p>    
  </li>

  <li>Create an <code>AndroidProducts.mk</code> file that points to the product's Makefiles. In
  this example, only the product definition Makefile is needed. The example below is from
  <code>device/samsung/tuna/AndroidProducts.mk</code>:
    <pre>
#
# This file should set PRODUCT_MAKEFILES to a list of product makefiles
# to expose to the build system.  LOCAL_DIR will already be set to
# the directory containing this file. 
#
# This file may not rely on the value of any variable other than
# LOCAL_DIR; do not use any conditionals, and do not look up the
# value of any variable that isn't set in this file or in a file that
# it includes.
#

PRODUCT_MAKEFILES := \
    $(LOCAL_DIR)/full_tuna.mk
</pre>
  </li>

  <li>Create a <code>BoardConfig.mk</code> Makefile that contains board-specific configurations.
  For an example, see <code>device/samsung/tuna/BoardConfig.mk</code>.
  </li>

  <li>Create a <code>vendorsetup.sh</code> file to add your product (a "lunch combo") to the build
  along with a <a href="{@docRoot}devices/build_system.html#variants">build variant</a> separated by a dash. For example:
<pre>
add_lunch_combo &lt;product_name&gt;-userdebug
</pre>
  </li>

  <li>At this point, you can create more product variants based on the same device, like how the
  Galaxy Nexus does with the <code>maguro</code> and <code>toro</code> products. For a complete
  example, see the Galaxy Nexus implementation in <code>device/samsung/tuna</code>,
  <code>device/samsung/maguro</code>, and <code>device/samsung/toro</code>.
  </li>

</ol>

<h3 id="prod-def">
  Product Definition Variables
</h3>
<p>
  Product-specific variables are defined in the product's Makefile. Variables maintained in a
  product definition files include:
</p>
<table>
  <tbody>
    <tr>
      <th>
        Parameter
      </th>
      <th>
        Description
      </th>
      <th>
        Example
      </th>
    </tr>
    <tr>
      <td>
        PRODUCT_AAPT_CONFIG
      </td>
      <td>
        <code>aapt</code> configurations to use when creating packages
      </td>
      <td></td>
    </tr>
    <tr>
      <td>
        PRODUCT_BRAND
      </td>
      <td>
        The brand (e.g., carrier) the software is customized for, if any
      </td>
      <td></td>
    </tr>
    <tr>
      <td>
        PRODUCT_CHARACTERISTICS
      </td>
      <td>
        <code>aapt</code> characteristics to allow adding variant-specific resources to a package.
      </td>
      <td>
        tablet,nosdcard
      </td>
    </tr>
    <tr>
      <td>
        PRODUCT_CONTRIBUTORS_FILE
      </td>
      <td>
        HTML file containing the contributors to the project.
      </td>
      <td></td>
    </tr>
    <tr>
      <td>
        PRODUCT_COPY_FILES
      </td>
      <td>
        List of words like <code>source_path:destination_path</code>. The file at the source path
        should be copied to the destination path when building this product. The rules for the copy
        steps are defined in config/Makefile
      </td>
      <td></td>
    </tr>
    <tr>
      <td>
        PRODUCT_DEVICE
      </td>
      <td>
        Name of the industrial design
      </td>
      <td>
        <code>tuna</code>
      </td>
    </tr>
    <tr>
      <td>
        PRODUCT_LOCALES
      </td>
      <td>
        A space-separated list of two-letter language code, two-letter country code pairs that
        describe several settings for the user, such as the UI language and time, date and currency
        formatting. The first locale listed in PRODUCT_LOCALES is is used if the locale has never
        been set before.
      </td>
      <td>
        <code>en_GB de_DE es_ES fr_CA</code>
      </td>
    </tr>
    <tr>
      <td>
        PRODUCT_MANUFACTURER
      </td>
      <td>
        Name of the manufacturer
      </td>
      <td>
        <code>acme</code>
      </td>
    </tr>
    <tr>
      <td>
        PRODUCT_MODEL
      </td>
      <td>
        End-user-visible name for the end product
      </td>
      <td></td>
    </tr>
    <tr>
      <td>
        PRODUCT_NAME
      </td>
      <td>
        End-user-visible name for the overall product. Appears in the Settings &gt; About screen.
      </td>
      <td></td>
    </tr>
    <tr>
      <td>
        PRODUCT_OTA_PUBLIC_KEYS
      </td>
      <td>
        List of Over the Air (OTA) public keys for the product
      </td>
      <td></td>
    </tr>
    <tr>
      <td>
        PRODUCT_PACKAGES
      </td>
      <td>
        Lists the APKs to install.
      </td>
      <td>
        <code>Calendar Contacts</code>
      </td>
    </tr>
    <tr>
      <td>
        PRODUCT_PACKAGE_OVERLAYS
      </td>
      <td>
        Indicate whether to use default resources or add any product specific overlays
      </td>
      <td>
        <code>vendor/acme/overlay</code>
      </td>
    </tr>
    <tr>
      <td>
        PRODUCT_PROPERTY_OVERRIDES
      </td>
      <td>
        List of property assignments in the format "key=value"
      </td>
      <td></td>
    </tr>
    <tr>
      <td>
        PRODUCT_TAGS
      </td>
      <td>
        list of space-separated words for a given product
      </td>
      <td></td>
    </tr>
  </tbody>
</table>


<h2 id="building">Building a Product</h2>
<p>To eventually build your product, add your HAL implementations and drivers to
  your device's source tree and execute the following commands.</p>
    <p>
      For a Fusion build for armv7 with NEON:
    </p>
<pre>
  build/envsetup.sh
  lunch your_lunch_combo
  PDK_FUSION_PLATFORM_ZIP=vendor/pdk/mini_armv7a_neon/mini_armv7a_neon-userdebug/platform/platform.zip make -j32
</pre>
    <p>
      For a Fusion build for armv7:
    </p>
<pre>
  build/envsetup.sh
  lunch your_lunch_combo
  PDK_FUSION_PLATFORM_ZIP=vendor/pdk/mini_armv7a/mini_armv7a-userdebug/platform/platform.zip make -j32
</pre>
    <p>
      For a non-Fusion build for both architectures, run <code>make</code> like this instead:
    </p>
<pre>
TARGET_BUILD_PDK=true make -j32
</pre>

<p class="note"><strong>Important:</strong> 
If you are switching between different lunch combos or between fusion and non-fusion builds,
run the following command
to remove any remnants of the test build so that it doesn't interfere
with your real product's build later on.

<pre>make installclean</pre>
</p>

    <p>
      You should find new binaries located in
      <code>/out/target/product/&lt;device_name&gt;</code>.
    </p>
  </li>
</ol>


<h2 id="managing">
  Managing Makefiles
</h2>
<p>
  Building with the PDK is different from normal product builds that have access to all of the
  Android sources. Existing product Makefiles require changes to build the product. This section
  provides an overview of the available workarounds in the PDK to support product builds.
</p>
<p>
  For product Makefiles:
</p>
<ul>
  <li>Use the <code>inherit-product-if-exists</code> macro instead of <code>inherit-product</code>
  if the target product file does not exist in the PDK.
  </li>
  <li>For the <code>PRODUCT_COPY_FILES</code> variable, use the
  <code>add-to-product-copy-files-if-exists</code> macro, which excludes the component if it does
  not exist.
  </li>
  <li>For an include sentence, use <code>-include</code> to ignore the error if the included file
  does not exist.
  </li>
  <li>You can also check the presence of necessary files and include it in a PDK based build with
  the <code>$(wildcard ...)</code> macro. For example, the following if statement executes the code
  block if <code>frameworks/base/Android.mk</code> exists:
    <pre>
ifneq ($(wildcard frameworks/base/Android.mk),)

...

endif
</pre>
  </li>
</ul>
<p>
  For <code>Android.mk</code> files:
</p>
<ul>
  <li>
    <code>TARGET_BUILD_PDK</code> is set to true for PDK builds. If you have a component that
    cannot be built in the PDK build, wrap the code to build the component in an if statement:
    <pre>
ifeq ($(TARGET_BUILD_PDK),)
...
endif
</pre>
  </li>
  <li>For building Android framework apps, the PDK uses the
  <code>TARGET_BUILD_JAVA_SUPPORT_LEVEL</code> variable to notify you if building apps is
  supported. The variable is set to <code>platform</code> if the platform APIs are available. The
  variable is set to <code>sdk</code> when only SDK based builds are supported. Because the PDK is
  shared pre-release and is based on a development tree, earlier versions of the PDK may not
  support a Java build and the variable is set to null. The following statements can enable a Java
  build only when it is supported:
    <pre>
ifneq ($(TARGET_BUILD_JAVA_SUPPORT_LEVEL),)
...
endif
</pre>
  </li>

  <li style="list-style: none">
    <p class="note">
      <strong>Note:</strong> You cannot use <code>TARGET_BUILD_...</code> variables in product
      definition Makefiles, because these variables are checked after the build reads the product
      definition Makefiles.
    </p>
  </li>
</ul>
