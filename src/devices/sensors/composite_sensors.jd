page.title=Composite sensors
@jd:body

<!--
    Copyright 2013 The Android Open Source Project

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<div id="qv-wrapper">
  <div id="qv">
    <h2>In this document</h2>
    <ol id="auto-toc">
    </ol>
  </div>
</div>

<h2 id="summary">Composite sensor type summary</h2>

<p>The following table lists the composite sensor types and their categories, 
underlying base sensors, and trigger modes. Certain base sensors are required of 
each sensor for accuracy. Using other tools to approximate results should be 
avoided as they will invariably provide a poor user experience.</p>
<table>
  <tr>
<th>Sensor type</th>
<th>Category</th>
<th>Underlying base sensor</th>
<th>Trigger mode</th>
</tr>
<tr>
<td>Game rotation vector</td>
<td>Attitude</td>
<td>Accelerometer, Gyroscope
MUST NOT USE Magnetometer</td>
<td>Continuous</td>
</tr>
<tr>
<td>Geomagnetic rotation vector (Magnetometer) <img src="images/battery_icon.png" width="20" height="20" alt="Low power sensor" /></td>
<td>Attitude</td>
<td>Accelerometer, Magnetometer
NOT Gyroscope</td>
<td>Continuous</td>
</tr>
<tr>
<td>Gravity</td>
<td>Attitude</td>
<td>Accelerometer, Gyroscope</td>
<td>Continuous</td>
</tr>
<tr>
<td>Gyroscope uncalibrated</td>
<td>Uncalibrated</td>
<td>Gyroscope</td>
<td>Continuous</td>
</tr>
<tr>
<td>Linear acceleration</td>
<td>Activity</td>
<td>Accelerometer, Gyroscope
AND Magnetometer</td>
<td>Continuous</td>
</tr>
<tr>
<td>Magnetic field uncalibrated</td>
<td>Uncalibrated</td>
<td>Magnetometer</td>
<td>Continuous</td>
</tr>
<tr>
<td>Orientation</td>
<td>Attitude</td>
<td>Accelerometer, Magnetometer
PREFERRED Gyroscope</td>
<td>Continuous</td>
</tr>
<tr>
<td>Rotation vector</td>
<td>Attitude</td>
<td>Accelerometer, Gyroscope
AND Magnetometer</td>
<td>Continuous</td>
</tr>
<tr>
<td>Significant motion
  <img src="images/battery_icon.png" width="20" height="20" alt="Low power sensor" /></td>
<td>Activity</td>
<td>Accelerometer (or another as long as very low power)</td>
<td>One-shot</td>
</tr>
<tr>
<td>Step counter
  <img src="images/battery_icon.png" width="20" height="20" alt="Low power sensor" /></td>
<td>Activity</td>
<td>Accelerometer</td>
<td>On-
change</td>
</tr>
<tr>
<td>Step detector
  <img src="images/battery_icon.png" width="20" height="20" alt="Low power sensor" /></td>
<td>Activity</td>
<td>Accelerometer</td>
<td>Special</td>
</tr>
</table>

<p><img src="images/battery_icon.png" alt="low power icon"/> = 
Low power sensor</p>

<h2 id="Activity">Activity sensors</h2>

<h3 id="acceleration">Linear acceleration</h3>

<p><em>Underlying base sensor(s): Accelerometer, Gyroscope AND Magnetometer<br/>
Trigger-mode: Continuous<br/>
Wake-up sensor: No</em></p>

<p>Indicates the linear acceleration of the device in device coordinates, not 
including gravity. The output is conceptually:<br/>
output of TYPE_ACCELERATION minus output of TYPE_GRAVITY.</p>

<p>Readings on all axes should be close to 0 when the device is immobile. Units are 
m/s^2. The coordinate system is the same as is used for the acceleration sensor.</p>

<h3 id="Significant">Significant motion</h3>

<p><em>Underlying base sensor(s): Accelerometer (or another as long as low power)<br/>
Trigger-mode: One-shot<br/>
Wake-up sensor: Yes</em></p>

<p>Significant motion allows a device to stay in suspend and idle modes longer and 
save power. It does this by relying upon last known location until the device 
experiences "significant motion." Such a movement would trigger on mode and a 
call to retrieve new location.</p>

<p>Here is an example on how the platform can use significant motion to save
power. When users are moving, their locations are updated frequently. After some period 
of inactivity, significant motion presumes the device is static and stops 
seeking location updates. It instead registers the last known location as valid. 
The device is then allowed to go into idle and then suspend mode.</p>

<p>This sensor exists to save power by keeping the SoC in suspend mode when the 
device is at rest. A sensor of this type triggers an event each time significant 
motion is detected and automatically disables itself. The only allowed value to 
return is 1.0.</p>

<p>A significant motion is a motion that might lead to a change in the user 
location. Examples of such significant motions are:</p>

<ul>
<li>walking or biking</li>
<li>sitting in a moving car, coach or train</li>
</ul>

<p>Examples of situations that should not trigger significant motion:</p>

<ul>
<li>phone in pocket and person is not moving</li>
<li>phone is on a table and the table shakes a bit due to nearby traffic or 
washing machine</li>
</ul>

<p>This sensor makes a tradeoff for power consumption that may result in a small 
amount of false negatives. This is done for a few reasons:</p>

<ol>
<li>The goal of this sensor is to save power.</li>
<li>Triggering an event when the user is not moving (false positive) is costly in 
terms of power, so it should be avoided.</li>
<li>Not triggering an event when the user is moving (false negative) is 
acceptable as long as it is not done repeatedly. If the user has been walking 
for 10 seconds, not triggering an event within those 10 seconds is not 
acceptable.</li>
</ol>

<p>To ensure the applications have the time to receive the significant motion event 
before the application processor goes back to sleep, the driver must hold a 
"timeout wake lock" for 200 milliseconds for every wake-up sensor. That is, the 
application processor should not be allowed to go back to sleep in the 200 
milliseconds following a wake-up interrupt.</p>

<p>IMPORTANT NOTE: This sensor is very different from the other types in that it 
must work when the screen is off without the need for holding a partial wake 
lock (other than the timeout wake lock) and MUST allow the SoC to go into 
suspend. When significant motion is detected, the sensor must awaken the SoC and 
the event be reported.</p>

<p>If a particular device cannot support this mode of operation, then this sensor 
type <strong>must not</strong> be reported by the HAL. ie: it is not acceptable to "emulate" 
this sensor in the HAL.</p>

<p>When the sensor is not activated, it must also be deactivated in the hardware; 
it must not wake up the SoC anymore, even in case of significant motion.</p>

<p>setDelay() has no effect and is ignored.</p>

<p>Once a "significant motion" event is returned, a sensor of this type must 
disable itself automatically, as if activate(..., 0) had been called.</p>

<h3 id="detector">Step detector</h3>

<p><em>Underlying base sensor(s): Accelerometer<br/>
Trigger-mode: Special<br/>
Wake-up sensor: No</em></p>

<p>A sensor of this type triggers an event each time a step is taken by the user. 
The only allowed value to return is 1.0 and an event is generated for each step. 
Like with any other event, the timestamp indicates when the event (here the 
step) occurred. This corresponds to when the foot hit the ground, generating a 
high variation in acceleration.</p>

<p>Compared to the step counter, the step detector should have a lower latency 
(less than 2 seconds). Both the step detector and the step counter detect when 
the user is walking, running and walking up the stairs. They should not trigger 
when the user is biking, driving or in other vehicles.</p>

<p>While this sensor operates, it shall not disrupt any other sensors, in 
particular, the accelerometer; it might very well be in use.</p>

<p>This sensor must be low power. That is, if the step detection cannot be done in 
hardware, this sensor should not be defined. Also, when the step detector is 
activated and the accelerometer is not, only steps should trigger interrupts 
(not accelerometer data).</p>

<p>setDelay() has no impact on this sensor type.</p>

<h3 id="counter">Step counter</h3>

<p><em>Underlying base sensor(s): Accelerometer<br/>
Trigger-mode: On-change<br/>
Wake-up sensor: No</em></p>

<p>A sensor of this type returns the number of steps taken by the user since the 
last reboot while activated. The value is returned as a uint64_t and is reset to 
zero only on a system reboot.</p>

<p>The timestamp of the event is set to the time when the last step for that event 
was taken.<br/>
See the <a href="#detector">Step detector</a> 
sensor type for the signification of the time of a step.</p>

<p>Compared to the step detector, the step counter can have a higher latency (less 
than 10 seconds).  Thanks to this latency, this sensor has a high accuracy; the 
step count after a full day of measures should be within 10% of the real step 
count. Both the step detector and the step counter detect when the user is 
walking, running and walking up the stairs. They should not trigger when the 
user is biking, driving or in other vehicles.</p>

<p><strong>Important note</strong>: This sensor is different from other types in that it must work 
when the screen is off without the need of holding a partial wake-lock and MUST 
allow the SoC to go into suspend.</p>

<p>While in suspend mode this sensor must stay active. No events are reported 
during that time but steps continue to be accounted for; an event will be 
reported as soon as the SoC resumes if the timeout has expired.</p>

<p>In other words, when the screen is off and the device is allowed to go into 
suspend mode, it should not be woken up, regardless of the setDelay() value. But 
the steps shall continue to be counted.</p>

<p>The driver must however ensure the internal step count never overflows. The 
minimum size of the hardware's internal counter shall be 16 bits. (This 
restriction is here to avoid too frequent wake-ups when the delay is very 
large.) It is allowed in this situation to wake the SoC up so the driver can do 
the counter maintenance.</p>

<p>While this sensor operates, it shall not disrupt any other sensors, in 
particular, the accelerometer; it might very well be in use.</p>

<p>If a particular device cannot support these modes of operation, then this sensor 
type <strong>must not</strong> be reported by the HAL. ie: it is not acceptable to "emulate" 
this sensor in the HAL.</p>

<p>This sensor must be low power. That is, if the step detection cannot be done in 
hardware, this sensor should not be defined. Also, when the step counter is 
activated and the accelerometer is not, only steps should trigger interrupts 
(not accelerometer data).</p>

<h2 id="Attitude">Attitude sensors</h2>

<h3 id="Rotation-vector">Rotation vector</h3>

<p><em>Underlying base sensor(s): Accelerometer, Gyroscope AND Magnetometer<br/>
Trigger-mode: Continuous<br/>
Wake-up sensor: No</em></p>

<p>The rotation vector symbolizes the orientation of the device relative to the 
East-North-Up coordinates frame. It is usually obtained by integration of 
accelerometer, gyroscope and magnetometer readings.</p>

<p>The East-North-Up coordinate system is defined as a direct orthonormal basis 
where:</p>

<ul>
<li>X points east and is tangential to the ground.</li>
<li>Y points north and is tangential to the ground.</li>
<li>Z points towards the sky and is perpendicular to the ground.</li>
</ul>

<p>The orientation of the phone is represented by the rotation necessary to align 
the East-North-Up coordinates with the phone's coordinates. That is, applying 
the rotation to the world frame (X,Y,Z) would align them with the phone 
coordinates (x,y,z).</p>

<p>The rotation can be seen as rotating the phone by an angle theta around an axis 
rot_axis to go from the reference (East-North-Up aligned) device orientation to 
the current device orientation.</p>

<p>The rotation is encoded as the four (reordered) components of a unit quaternion:</p>

<ul>
<li>sensors_event_t.data[0] = rot_axis.x*sin(theta/2)</li>
<li>sensors_event_t.data[1] = rot_axis.y*sin(theta/2)</li>
<li>sensors_event_t.data[2] = rot_axis.z*sin(theta/2)</li>
<li>sensors_event_t.data[3] = cos(theta/2)</li>
</ul>

<p>Where:</p>

<ul>
<li>rot_axis.x,y,z are the North-East-Up coordinates of a unit length vector 
representing the rotation axis</li>
<li>theta is the rotation angle</li>
</ul>

<p>The quaternion must be of norm 1. (It is a unit quaternion.) Failure to ensure 
this will cause erratic client behaviour.</p>

<p>In addition, this sensor reports an estimated heading accuracy:<br/>
sensors_event_t.data[4] = estimated_accuracy (in radians)</p>

<p>The heading error must be less than estimated_accuracy 95% of the time. This 
sensor must use a gyroscope and an accelerometer as main orientation change 
input.</p>

<p>This sensor should also include magnetometer input to make up for gyro drift, 
but it cannot be implemented using only a magnetometer.</p>

<h3 id="Game-rotation">Game rotation vector</h3>

<p><em>Underlying base sensor(s): Accelerometer, Gyroscope NOT Magnetometer<br/>
Trigger-mode: Continuous<br/>
Wake-up sensor: No</em></p>

<p>Similar to the <a href="#Rotation-vector">rotation vector</a> sensor but not using 
the geomagnetic field. Therefore the Y axis doesn't point north but instead to 
some other reference. That reference is allowed to drift by the same order of 
magnitude as the gyroscope drifts around the Z axis.</p>

<p>This sensor does not report an estimated heading accuracy:<br/>
sensors_event_t.data[4] is reserved and should be set to 0</p>

<p>In an ideal case, a phone rotated and returned to the same real-world 
orientation should report the same game rotation vector (without using the 
earth's geomagnetic field).</p>

<p>This sensor must be based on a gyroscope. It cannot be implemented using a 
magnetometer.</p>

<h3 id="Gravity">Gravity</h3>

<p><em>Underlying base sensor(s): Accelerometer, Gyroscope NOT Magnetometer<br/>
Trigger-mode: Continuous<br/>
Wake-up sensor: No</em></p>

<p>The gravity output of this sensor indicates the direction and magnitude of 
gravity in the device's coordinates. Units are m/s^2. On Earth, the magnitude is 
9.8 m/s^2. The coordinate system is the same as is used for the acceleration 
sensor. When the device is at rest, the output of the gravity sensor should be 
identical to that of the accelerometer.</p>

<h3 id="Magnetometer">Geomagnetic rotation vector (Magnetometer)</h3>

<p><em>Underlying base sensor(s): Accelerometer, Magnetometer NOT Gyroscope<br/>
Trigger-mode: Continuous<br/>
Wake-up sensor: No</em></p>

<p>This sensor is similar to the <a href="#Rotation-vector">rotation vector</a> sensor 
but using a magnetometer instead of a gyroscope.</p>

<p>This sensor must be based on a magnetometer. It cannot be implemented using a 
gyroscope, and gyroscope input cannot be used by this sensor.</p>

<p>Just like the rotation vector sensor, this sensor reports an estimated heading 
accuracy:<br/>
sensors_event_t.data[4] = estimated_accuracy (in radians)</p>

<p>The heading error must be less than estimated_accuracy 95% of the time.</p>

<p>See the <a href="#Rotation-vector">rotation vector</a> sensor description for more 
details.</p>

<h3 id="Orientation">Orientation</h3>

<p><em>Underlying base sensor(s): Accelerometer, Magnetometer PREFERRED Gyroscope<br/>
Trigger-mode: Continuous<br/>
Wake-up sensor: No</em></p>

<p><strong>Note</strong>: This is an older sensor type that has been 
deprecated in the Android SDK although not yet in the HAL. It has been replaced 
by the rotation vector sensor, which is more clearly defined, requires a 
gyroscope, and therefore provides more accurate results. Use the rotation vector 
sensor over the orientation sensor whenever possible.</p>

<p>The orientation sensor tracks the attitude of the device. All values are angles 
in degrees. Orientation sensors return sensor events for all three axes at a 
constant rate defined by setDelay().</p>

<ul>
<li>azimuth: angle between the magnetic north direction and the Y axis, around <br />
the Z axis (0&lt;=azimuth&lt;360). 0=North, 90=East, 180=South, 270=West</li>
<li>pitch: Rotation around X axis (-180&lt;=pitch&lt;=180), with positive values when 
the z-axis moves toward the y-axis.</li>
<li>roll: Rotation around Y axis (-90&lt;=roll&lt;=90), with positive values when the 
x-axis moves towards the z-axis.</li>
</ul>

<p>Please note, for historical reasons the roll angle is positive in the clockwise 
direction. (Mathematically speaking, it should be positive in the 
counter-clockwise direction):</p>

<div class="figure" style="width:264px">
  <img src="images/axis_positive_roll.png" alt="Depiction of orientation relative to a device" height="253" />
  <p class="img-caption">
    <strong>Figure 2.</strong> Orientation relative to a device.
  </p>
</div>

<p>This definition is different from yaw, pitch and roll used in aviation where the 
X axis is along the long side of the plane (tail to nose).</p>

<h2 id="Uncalibrated">Uncalibrated sensors</h2>

<p>Uncalibrated sensors provide more raw results and may include some bias but also 
contain fewer "jumps" from corrections applied through calibration. Some 
applications may prefer these uncalibrated results as smoother and more 
reliable. For instance, if an application is attempting to conduct its own 
sensor fusion, introducing calibrations can actually distort results.</p>

<h3 id="Gyroscope-uncalibrated">Gyroscope uncalibrated</h3>

<p><em>Underlying base sensor(s): Gyroscope<br/>
Trigger-mode: Continuous<br/>
Wake-up sensor: No</em></p>

<p>The uncalibrated gyroscope is useful for post-processing and melding orientation 
data. All values are in radians/second and measure the rate of rotation around 
the X, Y and Z axis. An estimation of the drift on each axis is reported as 
well.</p>

<p>No gyro-drift compensation shall be performed. Factory calibration and 
temperature compensation should still be applied to the rate of rotation 
(angular speeds).</p>

<p>The coordinate system is the same as is used for the acceleration sensor. 
Rotation is positive in the counter-clockwise direction (right-hand rule). That 
is, an observer looking from some positive location on the x, y or z axis at a 
device positioned on the origin would report positive rotation if the device 
appeared to be rotating counter clockwise. Note that this is the standard 
mathematical definition of positive rotation and does not agree with the 
definition of roll given elsewhere.</p>

<p>The range should at least be 17.45 rad/s (ie: ~1000 deg/s).</p>

<p>Content of an uncalibrated_gyro event (units are rad/sec):</p>

<ul>
<li>x_uncalib : angular speed (w/o drift compensation) around the X axis</li>
<li>y_uncalib : angular speed (w/o drift compensation) around the Y axis</li>
<li>z_uncalib : angular speed (w/o drift compensation) around the Z axis</li>
<li>x_bias : estimated drift around X axis in rad/s</li>
<li>y_bias : estimated drift around Y axis in rad/s</li>
<li>z_bias : estimated drift around Z axis in rad/s</li>
</ul>

<p>If the implementation is not able to estimate the drift, then this sensor <strong>must 
not</strong> be reported by this HAL. Instead, the regular 
<a href="{@docRoot}devices/sensors/base_triggers.html#Gyroscope">Gyroscope</a> sensor is used without drift compensation.</p>

<p>If this sensor is present, then the corresponding Gyroscope sensor must be 
present and both must return the same sensor_t::name and sensor_t::vendor.</p>

<h3 id="Magnetic-field-uncalibrated">Magnetic field uncalibrated</h3>

<p><em>Underlying base sensor(s): Magnetometer<br/>
Trigger-mode: Continuous<br/>
Wake-up sensor: No</em></p>

<p>Similar to <a href="{@docRoot}devices/sensors/base_triggers.html#Geomagnetic">Geomagnetic field</a> sensor, but the hard 
iron calibration is reported separately instead of being included in the 
measurement. The uncalibrated magnetometer allows the system to handle bad hard 
iron estimation.</p>

<p>Factory calibration and temperature compensation should still be applied to the 
"uncalibrated" measurement. Separating away the hard iron calibration estimation 
allows the system to better recover from bad hard iron estimation.</p>

<p>All values are in micro-Tesla (uT) and measure the ambient magnetic field in the 
X, Y and Z axis. Assumptions that the magnetic field is due to the Earth's poles 
should be avoided.</p>

<p>The uncalibrated_magnetic event contains three fields for uncalibrated measurement: x_uncalib, y_uncalib, z_uncalib. Each is a component of the 
measured magnetic field, with soft iron and temperature compensation applied, 
but not hard iron calibration. These values should be continuous (no 
re-calibration should cause a jump).</p>

<p>The uncalibrated_magnetic event contains three fields for hard iron bias estimates: x_bias, y_bias, z_bias. Each field is a component of the estimated 
hard iron calibration. They represent the offsets to apply to the calibrated 
readings to obtain uncalibrated readings (x_uncalib ~= x_calibrated + x_bias). 
These values are expected to jump as soon as the estimate of the hard iron 
changes, and they should be stable the rest of the time.</p>

<p>If this sensor is present, then the corresponding Geomagnetic field sensor must 
be present and both must return the same  sensor_t::name and sensor_t::vendor.</p>

<p>See the <a href="{@docRoot}devices/sensors/base_triggers.html#Geomagnetic">geomagnetic field</a> sensor description for more 
information.<br/></p>
